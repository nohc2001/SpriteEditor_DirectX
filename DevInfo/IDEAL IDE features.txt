IDE의 방향성 
1. 빠른 개발을 위해 개발자를 돕는 여러 기능들
	- 보통 언어 그 자체만으로 개발을 빨리 하도록 하거나 하느데, 옳지 못한 방향성이라고 느낌.
2. 코드를 쓰는 것이 게임처럼 느껴지게, 재미있고, 항상 새롭게. (IRTC)
	- 코딩을 도와주는 것은 무엇이 있을까?
	- 무엇이 순간의 보상이 되는가? (동기부여)
3. 극도의 최적화 & 구체적인 코드 (모호하지 않은 코드)
	- 내부에서 어떻게 돌아가는지 모두 아는 상태로 제품수준의 개발가능.
4. 대부분의 환경에서 돌아가고 개발가능한 ide, 하나의 코드로 포팅을 하는 것이 매우 쉬우면 좋겠다.
5. 코드 에디터 기능을 코드 에디터에서 만들 수 있다.
	- 불가능해 보이는 다양한 조건

기능
1. 문장식 코드 -> 문장변수에 문장을 넣어서 코드를 만든다.
2. 문장식 검색 -> 문장 변수를 추가한 검색 / 문장식 치환
3. 참조 / 정의 / 선언 찾기
4. 디펜던시 체인 보기
5. 메모리 탐색기 -> 구간마다 변수 이름과 값 나타내기
6. 자동완성 기능 (키기 / 끄기)
7. 함수 / 변수 찾기
8. 사용자 지정 단축기
9. 중단점 디버깅
10. (디버그 모드에서) 메모리 검사 감지 / 감시할 메모리를 코드 실행중 추가 기능
11. 다중 커서 컨트롤
12. 중괄호 접기 / 피기, 코드 접기 문자
13. 그래픽컬 주석 -> 코드자체가 문서가 되게끔.
14. 다중 복사 스택 -> Ctrl C 할때마다 쌓임 (클립보드 처럼.)
15. 어셈블리 미리보기 -> 하나의 라인 단위로 확장 / 축소 가능
16. 인라인 어셈블리
17. 코드 실시간 싸이클 예측 / 코드 실행비용 예측 (포트 / 메모리)
	- cpu 아키텍쳐에 따라..
18. CPU 시뮬레이션? > 가능?
19. 코드 정리 (포매팅)
20. 네임스페이스 영역 펼치고 접기
	using namespace aaa;
		//aaa 네임스페이스 사용!
	unusing namespace aaa;
21. 변수/함수/타입 이름 한번에 바꾸기 -> 여러 곳에 참조된 이름들을 바꾸기
22. 코드 즐겨찾기
23. 커스텀 코딩 규칙 -> 위반항목 검출기
24. 다른 언어의 코드를 이 코드로 바꾸기
25. 변수들의 관계 수학식으로 정리
26. RangeArr / DynamicArr / HashTable 제공
27. 실행중 힙 디버깅
28. 함수 테스트하기 -> 렌덤 인풋에 대응한 여러 처리 테스트
	- 함수하나를 만들면 단위테스트를 권유하고, 단위테스트를 하지 않는 함수는 호출할때 특정한 색깔로 깜빡거려 표시를 한다.
29. 로그 남기기
30. 버전관리
31. 다양한 비트연산 지원
32. 조사식에서 자동완성 기능 / 코드도 쓸 수 있게
33. 조사식의 결과의 출력 형식 조정
34. 변수 이름의 단축 / 확장
	- ex> lastPayment <-> lp;
	- 단축 버전은 식을 보기가 편하다. 데이터가 어떻게 흘러가는지 편하게 볼 수 있다.
	- 확장 버전은 변수의 의미를 잘 알 수 있다.
35. 전역 / 맴버 / 타입 / define 상수 / 열거형 / -> 글자 색깔로 구분 가능
36. 함수호출 코드에서 입력 매개변수와 출력 매개변수를 표시한다.
	- 뭐가 출력이고 입력인지 알 수 있음.
37. case를 접을 수 있게 하자.
38. 실행이 오류가 나며, 회귀 테스트를 위한 데이터를 내보낸다.
39. 식이 길 경우, 디버깅할때 한번에 실행되는 것처럼 보이기 때문에,
	- 원한다면, 차근차근 계산을 진행하도록 하는 게 가능하도록 한다.
	- ex> (x+a) / b - c ^ d
		- n0 = x + a;
		- n0 = n0 / b;
		- n1 = c ^ d;
		- n0 = n0 - n1;
40. 함수 매개변수에 뭔가를 써 넣을때, 함수 원형을 이용하여 해당 매개변수를 설명한다.
41. simd와 asm 과 관련 명령을 자세히 설명하고, 함수로써 이용할 수 있게 한다.
42. 코드를 작성하는 사람의 입장에서는 함수를 많이 사용해 생각할 거리를 줄이는 것이 편하지만,
	디버깅을 하는 사람의 입장에서는 함수를 최대한 많이 풀어서 문제의 원인을 찾게 도와주는 것이 편하기 때문에,
	함수 호출이 일어나는 라인에서, 어떤 버튼을 클릭하면, 함수의 동작을 인라인으로 보여주고, 보여주는 상태에서는
	그 과정을 차례로 가며 볼 수 있다. 또한 확장상태에서는 디버깅시 조사식에서 내부 변수를 조사할 수 있다.
43. 중단점과 조사식을 통한 디버깅이 충분하지 않을 때가 많다. 때문에 디버깅 시에만 작동되는 코드인 디버깅 코드가 필요하고, 
	디버깅을 하지 않을 시에는 표시되지 않는다.
	이 디버깅 코드에는 테그가 붙을 수 있는데, 어떤 정보를 보려고 하는지에 따라, 어떤 오류를 처리하려하는지에 따라 이름을 다르게 하면,
	디버깅을 할때 해당 테그의 디버깅 코드를 비활성화하거나, 해당 디버깅 코드 데이터를 삭제할 수 있다.
44. 한 코드 파일 내에서 다양한 시점을 저장하고 싶을때가 많은데, 슬라이더 버튼을 여러개를 만들어 한번에 이동할 수 있다.
	다른 슬라이더 버튼 끼리는 다른 색상과 설명이 붙고, 해당 버튼을 클릭하면 시점이 해당 슬라이더의 줄 번호로 이동한다.
	-> 정의 피킹 / 참조를 찾거나 할때 사용될 수 있다.
	-> 때문에 삭제도 한번의 클릭으로 용이하게 한다.
45. 코드에서 하나의 단어를 다른 단어로 대체하는 것. (복사 붙여넣기 수준으로 간단하게.)
	ex> float ydelta = poses.at(i).y - poses.at(i - 1).y; // 여기에 Ctrl F V + y Enter x
	-> float xdelta = poses.at(i).x - poses.at(i - 1).x;